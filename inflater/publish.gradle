apply plugin: 'maven-publish'

afterEvaluate { project ->
	Properties properties = new Properties()
	properties.load(project.rootProject.file('local.properties').newDataInputStream())

	project.archivesBaseName = BINTRAY_NAME
	group = BINTRAY_GROUP
	version = BINTRAY_VERSION

	bintray {
		user = properties.getProperty("bintray.user")
		key = properties.getProperty("bintray.apikey")

		configurations = ['archives']
		dryRun = false

		pkg {
			repo = BINTRAY_REPO
			name = BINTRAY_NAME
			desc = BINTRAY_DESCRIPTION
			websiteUrl = BINTRAY_WEBSITE_URL
			vcsUrl = BINTRAY_VCS_URL
			issueTrackerUrl = BINTRAY_ISSUE_TRACKER
			licenses = [LICENSE]
		}
	}

	task sourcesJar(type: Jar) {
		classifier = 'sources'
		from android.sourceSets.main.java.srcDirs
	}

	task javadoc(type: Javadoc) {
		source = android.sourceSets.main.java.srcDirs
		classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
		classpath += configurations.javadocDeps
	}

	task javadocJar(type: Jar, dependsOn: javadoc) {
		classifier = 'javadoc'
		from javadoc.getDestinationDir()
	}

	artifacts {
		archives sourcesJar
		archives javadocJar
	}

	install {
		repositories.mavenInstaller {
			pom.project {
				packaging PACKAGING
				groupId BINTRAY_GROUP
				artifactId BINTRAY_NAME
				version BINTRAY_VERSION

				name BINTRAY_NAME
				url BINTRAY_VCS_URL

				licenses {
					license {
						name LICENSE_NAME
						url LICENSE_URL
						distribution LICENSE_DISTRIBUTION
					}
				}
				developers {
					developer {
						id DEVELOPER_ID
						name DEVELOPER_NAME
					}
				}
				scm {
					connection SCM_URL_CONNECTION
					url SCM_URL
				}
			}
		}
	}

	publishing.publications {
		maven(MavenPublication) {
			groupId BINTRAY_GROUP
			artifactId BINTRAY_NAME
			version BINTRAY_VERSION

			artifact bundleRelease
			artifact javadocJar
			artifact sourcesJar

			pom.withXml {
				def dependenciesNode = asNode().appendNode('dependencies')

				// List all compile dependencies and write to POM
				configurations.compile.getAllDependencies().each { Dependency dep ->
					if (dep.group == null || dep.version == null || dep.name == null || dep.name == "unspecified")
						return // ignore invalid dependencies

					def dependencyNode = dependenciesNode.appendNode('dependency')
					dependencyNode.appendNode('groupId', dep.group)
					dependencyNode.appendNode('artifactId', dep.name)
					dependencyNode.appendNode('version', dep.version)

					if (!dep.transitive) {
						// If this dependency is transitive, we should force exclude all its dependencies them from the POM
						def exclusionNode = dependencyNode.appendNode('exclusions').appendNode('exclusion')
						exclusionNode.appendNode('groupId', '*')
						exclusionNode.appendNode('artifactId', '*')
					} else if (!dep.properties.excludeRules.empty) {
						// Otherwise add specified exclude rules
						def exclusionsNode = dependencyNode.appendNode('exclusions')
						dep.properties.excludeRules.each { ExcludeRule rule ->
							def exclusionNode = exclusionsNode.appendNode('exclusion')
							exclusionNode.appendNode('groupId', rule.group ?: '*')
							exclusionNode.appendNode('artifactId', rule.module ?: '*')
						}
					}
				}
			}
		}
	}
}
